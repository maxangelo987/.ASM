.model large
.code
org 100h

jmp main

simp	db '								',0ah, 0dh	
	db '								',0ah, 0dh
	db '								',0ah, 0dh
	db '			Блллллллллллллллллллллллллллллллллллллл	',0ah, 0dh	
	db '			Бл				     Бл	',0ah, 0dh
	db '			Бл				     Бл	',0ah, 0dh
	db '			Бл	   S I M P L I C I T Y       Бл ',0ah, 0dh
	db '			Бл				     Бл ',0ah, 0dh
	db '			Бл                                   Бл ',0ah, 0dh
	db '			Бл       Select the best answer      Бл ',0ah, 0dh
	db '			Бл                                   Бл ',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Блллллллллллллллллллллллллллллллллллллл	',0ah, 0dh,'$'



flip	db '								',0ah, 0dh	
	db '								',0ah, 0dh
	db '								',0ah, 0dh
	db '			Блллллллллллллллллллллллллллллллллллллл	',0ah, 0dh	
	db '			Бл				     Бл	',0ah, 0dh
	db '			Бл				     Бл	',0ah, 0dh
	db '			Бл   T I L E  C O L O R  M E M O R Y Бл ',0ah, 0dh
	db '			Бл				     Бл ',0ah, 0dh
	db '			Бл                                   Бл ',0ah, 0dh
	db '			Бл       Memorize the color of       Бл ',0ah, 0dh
	db '			Бл        the tiles. Select the      Бл ',0ah, 0dh
	db '			Бл          indicated color.         Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Блллллллллллллллллллллллллллллллллллллл	',0ah, 0dh,'$'

tap	db '								',0ah, 0dh	
	db '								',0ah, 0dh
	db '								',0ah, 0dh
	db '			Блллллллллллллллллллллллллллллллллллллл	',0ah, 0dh	
	db '			Бл				     Бл	',0ah, 0dh
	db '			Бл				     Бл	',0ah, 0dh
	db '			Бл     C O L O R  M A J O R I T Y    Бл ',0ah, 0dh
	db '			Бл				     Бл ',0ah, 0dh
	db '			Бл                                   Бл ',0ah, 0dh
	db '			Бл       Choose the letter of the    Бл ',0ah, 0dh
	db '			Бл      tile which represents the    Бл ',0ah, 0dh
	db '			Бл            most color	     Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Блллллллллллллллллллллллллллллллллллллл	',0ah, 0dh,'$'

dep	db '								',0ah, 0dh	
	db '								',0ah, 0dh
	db '								',0ah, 0dh
	db '			Блллллллллллллллллллллллллллллллллллллл	',0ah, 0dh	
	db '			Бл				     Бл	',0ah, 0dh
	db '			Бл				     Бл	',0ah, 0dh
	db '			Бл C O L O R  O F  D E C E P T I O N Бл ',0ah, 0dh
	db '			Бл				     Бл ',0ah, 0dh
	db '			Бл                                   Бл ',0ah, 0dh
	db '			Бл       Indicated color must        Бл ',0ah, 0dh
	db '			Бл    correspond to the background.  Бл ',0ah, 0dh
	db '			Бл         Select the color which    Бл	',0ah, 0dh
	db '			Бл            does not belong        Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл      Q-Upper Left  W-Upper Right  Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл      A-Lower Left  S-Lower Right  Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Бл                                   Бл	',0ah, 0dh
	db '			Блллллллллллллллллллллллллллллллллллллл	',0ah, 0dh,'$'

cover db '                                                                 ',0ah, 0dh
      db '                                                                 ',0ah, 0dh
      db '                                                                 ',0ah, 0dh
      db '            Влллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh
      db '            Влллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh
      db '            Влллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh
      db '            Влл                                               Влл',0ah, 0dh
      db '            Влл      Вллллл  Вллллл   Влллллл Влл Влл   Влл   Влл',0ah, 0dh
      db '            Влл      Влл Влл Влл Влл      Влл Влл Влллл Влл   Влл',0ah, 0dh
      db '            Влл      Вллллл  Влллллл  Влллллл Влл ВллВллВлл   Влл',0ah, 0dh
      db '            Влл      Влл Влл Влл Влл  Влл Влл Влл Влл Влллл   Влл',0ah, 0dh
      db '            Влл      Вллллл  Влл  Влл Влллллл Влл Влл   Влл   Влл',0ah, 0dh
      db '            Влл                                               Влл',0ah, 0dh
      db '            Влл                                               Влл',0ah, 0dh
      db '            Влл      Влл       Влл Влллллл Вллллл   Влллллл   Влл',0ah, 0dh
      db '            Влл      Влл       Влл     Влл Влл Влл  Влл       Влл',0ah, 0dh
      db '            Влл      Влл  Влл  Влл Влллллл Вллллл   Влллллл   Влл',0ah, 0dh
      db '            Влл      Влл Влллл Влл Влл Влл Влл Влл      Влл   Влл',0ah, 0dh
      db '            Влл       Вллл   Вллл  Влллллл Влл  Влл Влллллл   Влл',0ah, 0dh
      db '            Влл                                               Влл',0ah, 0dh
      db '            ВлллллллллллЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭлллллллллллл',0ah, 0dh
      db '            ВлллллллллллCreated by: Ellaine Joy Ponteлллллллллллл',0ah, 0dh
      db '            ВлллллллллллЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭЭлллллллллллл',0ah, 0dh
      db '                                                                 ',0ah, 0dh  
      db '                                                                 ',0ah, 0dh, '$'

run1 db '       ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh	
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл            лллллл    лллллл лллллл лллллл   лл    лл          ллл',0ah, 0dh
     db '	ллл            лл   лл   лл         лл лл    лл лл    лл          ллл',0ah, 0dh
     db '	ллл            лллллл    лллл   лллллл лл    лл лллллллл          ллл',0ah, 0dh
     db '	ллл            лл   лл   лл     лл  лл лл    лл    лл             ллл',0ah, 0dh
     db '	ллл    	       лл    лл  лл     лл  лл лл    лл    лл             ллл',0ah, 0dh
     db '	ллл            лл     лл лллллл лллллл лллллл      лл             ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл                              лллл                             ллл',0ah, 0dh
     db '	ллл	                       лл  лл                             ллл',0ah, 0dh
     db '	ллл                          лл    лл                             ллл',0ah, 0dh
     db '	ллл                                лл                             ллл',0ah, 0dh
     db '	ллл                                лл                             ллл',0ah, 0dh
     db '	ллл                                лл                             ллл',0ah, 0dh
     db '	ллл                           лллллллллллл                        ллл',0ah, 0dh
     db '	ллл                                                    		  ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh                                                                   
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh,'$'

run2 db '       ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh	
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл            лллллл    лллллл лллллл лллллл   лл    лл          ллл',0ah, 0dh
     db '	ллл            лл   лл   лл         лл лл    лл лл    лл          ллл',0ah, 0dh
     db '	ллл            лллллл    лллл   лллллл лл    лл лллллллл          ллл',0ah, 0dh
     db '	ллл            лл   лл   лл     лл  лл лл    лл    лл             ллл',0ah, 0dh
     db '	ллл    	       лл    лл  лл     лл  лл лл    лл    лл             ллл',0ah, 0dh
     db '	ллл            лл     лл лллллл лллллл лллллл      лл             ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл                              лллл                             ллл',0ah, 0dh
     db '	ллл	                       лл    лл                           ллл',0ah, 0dh
     db '	ллл                          лл       лл                          ллл',0ah, 0dh
     db '	ллл                                 лл                            ллл',0ah, 0dh
     db '	ллл                              лл                               ллл',0ah, 0dh
     db '	ллл                           лл                                  ллл',0ah, 0dh
     db '	ллл                           лллллллллл                          ллл',0ah, 0dh
     db '	ллл                                                    		  ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh                                                                   
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh,'$'

run3 db '       ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh	
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл            лллллл    лллллл лллллл лллллл   лл    лл          ллл',0ah, 0dh
     db '	ллл            лл   лл   лл         лл лл    лл лл    лл          ллл',0ah, 0dh
     db '	ллл            лллллл    лллл   лллллл лл    лл лллллллл          ллл',0ah, 0dh
     db '	ллл            лл   лл   лл     лл  лл лл    лл    лл             ллл',0ah, 0dh
     db '	ллл    	       лл    лл  лл     лл  лл лл    лл    лл             ллл',0ah, 0dh
     db '	ллл            лл     лл лллллл лллллл лллллл      лл             ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл                            лллллллллл                         ллл',0ah, 0dh
     db '	ллл	                               лл                         ллл',0ah, 0dh
     db '	ллл                            лллллллллл                         ллл',0ah, 0dh
     db '	ллл                                    лл                         ллл',0ah, 0dh
     db '	ллл                                    лл                         ллл',0ah, 0dh
     db '	ллл                            лллллллллл                         ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл                                                    		  ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh                                                                   
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh,'$'


mechbox1 db 1 dup (201), 18 dup (205), 1 dup (187), 10 dup (176), 1 dup (201), 18 dup (205), 1 dup (187), '$'
mechbox2 db 1 dup (186), 18 dup (32), 1 dup (186), 10 dup (176), 1 dup (186), 18 dup (32), 1 dup (186), '$'
mechbox3 db 1 dup (200), 18 dup (205), 1 dup (188), 10 dup (176), 1 dup (200), 18 dup (205), 1 dup (188), '$' 

menuborder db 1 dup (201), 78 dup (205), 1 dup (187)
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
           db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh	
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (186), 78 dup (176), 1 dup (186),0ad,0dh
	   db 1 dup (200), 78 dup (205), 1 dup (188),'$'
gamo db '       ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh	
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh
     db '	ллл								  ллл',0ah, 0dh
     db '	ллл 	       ллллллллл  лллллллл  лл	     лл	лллллллл	  ллл',0ah, 0dh
     db '	ллл            лл               лл  лллл   лллл лл                ллл',0ah, 0dh
     db '	ллл            лл               лл  лл  лллл лл лл                ллл',0ah, 0dh
     db '	ллл            лл   лллл  лллллллл  лл   лл  лл лллллл            ллл',0ah, 0dh
     db '	ллл    	       лл     лл  лл    лл  лл       лл лл                ллл',0ah, 0dh
     db '	ллл            ллллллллл  лллллллл  лл       лл лллллллл          ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллл	                                                          ллл',0ah, 0dh
     db '	ллл             ллллллл   лл    лл  лллллллл  лллллллл            ллл',0ah, 0dh
     db '	ллл            лл     лл  лл    лл  лл        лл     ллл          ллл',0ah, 0dh
     db '	ллл            лл     лл  лл    лл  лл        лл      лл          ллл',0ah, 0dh
     db '	ллл            лл     лл  лл    лл  лллллл    лллллллл            ллл',0ah, 0dh
     db '	ллл            лл     лл   л    л   лл        лл    лл            ллл',0ah, 0dh
     db '	ллл             ллллллл     лллл    лллллллл  лл     лл           ллл',0ah, 0dh
     db '	ллл                                                               ллл',0ah, 0dh
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh         
     db '	ллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллллл',0ah, 0dh,'$'

bordsmile1 db 17 dup (01), '$'
bordsmile2 db 4 dup (01), '$'

mech db 'MECHANICS', '$'
play db 'PLAY', '$'
quit db 'QUIT', '$'
wel db'WELCOME TO BRAIN WARS!',1 dup (001),'$'
wel1 db'Brain Wars: The Scientific Battle Over the Existence of the Mind','$'
wel2 db 'and the Proof that will change our LIVES. ','$'
simpl db '[S]implicity','$'
codep db '[C]olor  Deception','$'
ord db 'Color [M]emory', '$'
cmajor db 'Color Majorit[Y]', '$'
back db '<- Back', '$'
escape db '[Q]uit', '$'
quits db 21 dup (32),' DO YOU REALLY WANT TO QUIT THE GAME?',21 dup (32), 0ah, 0dh
      db 31 dup (32) ,'[A]ccept/[D]ecline', '$'	

ar1 db 1 dup(201), 37 dup(205), 1 dup(187),'$'
ar2 db 1 dup(186), 37 dup(20h), 1 dup(186),'$'
ar3 db 1 dup(204), 37 dup(205), 1 dup(185),'$'
ar4 db 1 dup(200), 37 dup(205), 1 dup(188),'$'

string1 label byte
maxlen1 db 15
actlen1 db ?
player1 db 16 dup('$')

string2 label byte
maxlen2 db 15
actlen2 db ?
player2 db 16 dup('$')

plar1 db'PLAYER 1:','$'
plar2 db'PLAYER 2:','$'
statres db 'Result: ','$'
start db '[P]LAY','$'
twopl db 0

base1 dw ?
base2 dw ?

fgamecount db ?
rafgames db ?
eqgamecount db ?
raequat db ?
taptilecount db ?
rataptile db ?
decepcount db ?
radecep db ?
resul1 db ?
resul2 db ?

ch1 db 'Q$'
ch2 db 'W$'
ch3 db 'E$'
ch4 db 'A$'
ch5 db 'S$'
ch6 db 'D$'
col db ?
row db ?
chcursdl db ?

bro db 'Brown$'
gre db'Green','$'
red db'Red','$'
whi db'White','$'
blu db'Blue','$'
cyan db 'Cyan','$'
yel db 'Yellow','$'
mag db 'Magenta$'

colr db'Choose the color that does not belong','$'
word1 db 'Type the letters/tiles in descending order they appear ','$' 
lettera db 'a$'
letterb db 'b$'
letterc db 'c$'
letterd db 'd$'
diss db ' Great$'

;--gamebox declarations	
	gamebox1 db 41 dup (219), '$'
	gamebox2 db 2 dup (219), 37 dup (32), 2 dup (219), '$' 
;-----------------
;----first game declarations	
	game1 db '4 + 4 - 4 * 4 = ?', '$'
	game1ch1 db '[A] -8', '$'
	game1ch2 db '[B] 16', '$'
	game1ch3 db '[C]  8', '$'
	game1ch4 db '[D]  4', '$'
;----------------
;-----2nd game declarations
game2 db '3 * 2 - 6 = ?', '$'
	game2ch1 db '[A]-12', '$'
	game2ch2 db '[B] 11', '$'
	game2ch3 db '[C]  1', '$'
	game2ch4 db '[D]  0', '$'
;-----3rd game declarations
game3 db '1 - 1 * 1  = ?', '$'
	game3ch1 db '[A]  1', '$'
	game3ch2 db '[B] -1', '$'
	game3ch3 db '[C]  0', '$'
	game3ch4 db '[D]  2', '$'
;-------4th game declarations
game4 db '1 + 1 * 1 = ?', '$'
	game4ch1 db '[A]  1', '$'
	game4ch2 db '[B] -1', '$'
	game4ch3 db '[C]  0', '$'
	game4ch4 db '[D]  2', '$'
;-----5th game declarations
game5 db '4 + _ = 5', '$'
	game5ch1 db '[A] -1', '$'
	game5ch2 db '[B]  1', '$'
	game5ch3 db '[C]  2', '$'
	game5ch4 db '[D]  2', '$'
;------------
game6 db ' _ + _ = 4', '$'
	game6ch1 db '[A] 2,1', '$'
	game6ch2 db '[B] 3,1', '$'
	game6ch3 db '[C] 3,2', '$'
	game6ch4 db '[D] 1,4', '$'
;------------
game7 db '_ + _ = 1', '$'
	game7ch1 db '[A] 1,1', '$'
	game7ch2 db '[B] 0,2', '$'
	game7ch3 db '[C] 1,2', '$'
	game7ch4 db '[D] 1,0', '$'
;------------
game8 db '_ - 3 = 0', '$'
	game8ch1 db '[A]  3', '$'
	game8ch2 db '[B]  1', '$'
	game8ch3 db '[C]  2', '$'
	game8ch4 db '[D] -3', '$'
;------------
game9 db '6 * _ = 30', '$'
	game9ch1 db '[A] -1', '$'
	game9ch2 db '[B]  7', '$'
	game9ch3 db '[C]  6', '$'
	game9ch4 db '[D]  5', '$'
;------------
game10 db '10 + _ = 5', '$'
	game10ch1 db '[A] -5', '$'
	game10ch2 db '[B]  5', '$'
	game10ch3 db '[C]  2', '$'
	game10ch4 db '[D] -1', '$'
;------------
game11 db '4 _ 1 = 5', '$'
	game11ch1 db '[A]  +', '$'
	game11ch2 db '[B]  -', '$'
	game11ch3 db '[C]  *', '$'
	game11ch4 db '[D]  /', '$'
;------------
game12 db '10 _ 4 = 6', '$'
	game12ch1 db '[A]  /', '$'
	game12ch2 db '[B]  +', '$'
	game12ch3 db '[C]  -', '$'
	game12ch4 db '[D]  *', '$'
;------------
game13 db '(1 _ 1) * 6 = 12', '$'
	game13ch1 db '[A]  *', '$'
	game13ch2 db '[B]  +', '$'
	game13ch3 db '[C]  -', '$'
	game13ch4 db '[D]  /', '$'
;------------
game14 db '4 _ (4 + 8) = -8', '$'
	game14ch1 db '[A]  -', '$'
	game14ch2 db '[B]  +', '$'
	game14ch3 db '[C]  *', '$'
	game14ch4 db '[D]  /', '$'
;------------
game15 db '(7 _ 8) + 5 = 61', '$'
	game15ch1 db '[A]  /', '$'
	game15ch2 db '[B]  +', '$'
	game15ch3 db '[C]  -', '$'
	game15ch4 db '[D]  *', '$'

inst db 'Memorize the color of Tiles; Enter M if memorized','$'
mem db '[M]EMORIZED','$'

marg1 db 1 dup(201), 78 dup(205), 1 dup(187),'$'
marg2 db 1 dup(186), 78 dup(20h), 1 dup(186),'$'
marg3 db 1 dup(200), 78 dup(205), 1 dup(188),'$'
marg4 db 1 dup(186),'$'
marg5 db 1 dup(186), 78 dup(176), 1 dup(186),'$'

cur1 db 17 dup (001),'$'
cur2 db 4 dup(001),'MECHANICS', 4 dup(001),'$'
cur5 db 6 dup (001),'PLAY', 7 dup(001),'$'
cur3 db 6 dup (001),'QUIT', 7 dup(001),'$'
col1 db ?
row1 db ?
randomeq db ?
randoms db ?
score db ?
res1 db ?
res2 db ?

statwin db 'Congratulations! PLAYER 1 WINS :) :D !! ', '$'
statlose db 'Congratulations! PLAYER 2 WINS ;P','$'
statdraw db "It's a DRAW! Your level of Intelligence is Equal!", '$'
mao db 'БВВВВВВВВВВВннЭЭЭЭЭ'

main proc near

	call covering
	call delay2
	call menuing


anina2:
	
	call delay
	
	mov dh, 20
	mov dl, 60
	call cursor

	lea dx, start
	call print

drii:
	call ask
	cmp al, 'P'
	if e call round1
	cmp al,'p'
	if e call round1
	if ne jmp drii

stop:
int 20h
main endp
end main

menuchoose proc near

	mov chcursdl, 8

	mov dh, 11
 	mov dl, chcursdl
	call cursor
askarr:
	call ask
	cmp ah, 04dh
	if e call rightch
	cmp ah, 04bh
	if e call leftch
	cmp ah, 1ch
	if e call ents
	if ne jmp askarr
ret
menuchoose endp

ents proc near
	cmp chcursdl, 8
	if e call mechanics
	cmp chcursdl, 33
	if e call area
	cmp chcursdl, 58
	if e call quitz
	
ret
ents endp

quitz proc near
	mov ax, 03h
	int 10h
	
	mov cx, 0000h
	mov dx, 184fh
	mov bh, 05h
	call scroll

	mov dh, 12
	mov dl, 00
	call cursor

	lea dx, quits
	call print
askingq:
	call ask
	cmp al, 'a'
	if e jmp exits
	cmp al, 'A'
	if e jmp exits
	cmp al, 'd'
	if e call main
	cmp al, 'D'
	if e call main
	if ne jmp askingq
exits:
	mov ax, 03h
	int 10h
	
	int 20h		
ret
quitz endp
	
;;-----area
area proc near
	mov ax, 03h
	int 10h

	mov ch, 0
	mov cl, 0
	mov dh, 22
	mov dl, 38
	mov bh, 1eh
	call scroll

	mov ch, 0
	mov cl, 41
	mov dh, 22
	mov dl, 79
	mov bh, 5bh
	call scroll


	mov dh, 0
	mov dl, 0
	call cursor	

	lea dx, ar1
	call print

	mov dh, 1
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 2
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 3
	mov dl, 0
	call cursor
	lea dx, ar3
	call print

	mov dh, 4
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 5
	mov dl, 0
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 6
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 7	
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 8
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 9
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 10
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 11
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 12
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 13	
	mov dl, 0
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 14
	mov dl, 0
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 15
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 16
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 17
	mov dl, 0
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 18
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 19
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 20
	mov dl, 0
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 21
	mov dl, 0
	call cursor
	lea dx, ar2
	call print

	mov dh, 22	
	mov dl, 0
	call cursor
	lea dx, ar4
	call print

;-------player2
	mov dh, 0
	mov dl, 41
	call cursor
	
	lea dx, ar1
	call print


	mov dh, 1
	mov dl, 41
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 2
	mov dl, 41
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 3
	mov dl, 41
	call cursor
	lea dx, ar3
	call print
	
	mov dh, 4
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 5
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 6
	mov dl, 41
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 7
	mov dl, 41
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 8
	mov dl, 41
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 9
	mov dl, 41
	call cursor
	lea dx, ar2
	call print
	
	mov dh, 10
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 11
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 12
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 13
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 14
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 15
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 16
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 17
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 18
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 19
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 20
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 21
	mov dl, 41
	call cursor
	lea dx, ar2
	call print

	mov dh, 22
	mov dl, 41
	call cursor
	lea dx, ar4
	call print

	mov dh,2
	mov dl,3
	call cursor

	lea dx, plar1
	call print

	mov dh,2
	mov dl,45
	call cursor

	lea dx, plar2
	call print

	mov dh,11
	mov dl,3
	call cursor

	lea dx, statres
	call print

	mov dh,11
	mov dl,45
	call cursor

	lea dx, statres
	call print

askname:
	mov ch, 02
	mov cl, 12
	mov dh,2
	mov dl, 37
	mov bh,1eh
	call scroll

	mov dh,2
	mov dl, 12
	call cursor

	mov ah, 0ah
	lea dx, string1
	int 21h

printname1:
	mov ch, 02
	mov cl, 12
	mov dh,2
	mov dl, 37
	mov bh,1eh
	call scroll

	mov dh, 2
	mov dl, 12
	call cursor

	lea dx, player1
	call print

	jmp askname2

askname2:
	call delay

	mov ch, 02
	mov cl, 54
	mov dh, 02
	mov dl,77
	mov bh, 5bh
	call scroll

	mov dh, 2
	mov dl, 54
	call cursor

	mov ah, 0ah
	lea dx, string2
	int 21h

printname2:

	mov ch, 02
	mov cl, 54
	mov dh, 02
	mov dl,77
	mov bh, 5bh
	call scroll

	mov dh, 2
	mov dl,54
	call cursor

	lea dx, player2
	call print
	
	mov dh,20
	mov dl, 15
	call cursor

	lea dx, start
	call print
ax1:
;-----------------------------------------------------first game
call ask
cmp al,'p'
if e call round1
cmp al,'P'
if e call round1
if ne jmp ax1
ret
area endp
;------
round1 proc near
	
	mov score, 0
	mov ax, 03h
	int 10h


	mov bh, 38h
	mov cx, 0000h
	mov dx, 184fh
	call scroll

	mov dx, 0000h
	call cursor

	lea dx, run1
	call print

	call delay

	mov dx, 0000h
	call cursor

	lea dx, run2
	call print

	call delay

	mov dx, 0000h
	call cursor

	lea dx, run3
	call print
	
	call delay	
	call randomprob
ret
round1 endp

randomprob proc near
	mov ax, 03h
	int 10h
	
equagame5:
	cmp eqgamecount, 16
	if e jmp taptile3
	if ne jmp eqgo
eqgo:
	call random1

	cmp randomeq, 0
	if e call game1p
	cmp randomeq, 1
	if e call game2p
	cmp randomeq, 2
	if e call game3p
	cmp randomeq, 3
	if e call game4p
	cmp randomeq, 4
	if e call game5p
	cmp randomeq, 5
	if e call game6p
	cmp randomeq, 6
	if e call game7p
	cmp randomeq, 7
	if e call game8p
	cmp randomeq, 8
	if e call game9p
	cmp randomeq, 9
	if e call game10p
	cmp randomeq, 10
	if e call game11p
	cmp randomeq, 11
	if e call game12p
	cmp randomeq, 12
	if e call game13p
	cmp randomeq, 13
	if e call game14p
	cmp randomeq, 14
	if e call game15p	
taptile3:
	cmp taptilecount, 11
	if e jmp decepgame3
	if ne jmp tapgo
tapgo:
	call random2
	
	cmp randoms, 0
	if e call color1
	cmp randoms, 1
	if e call color2
	cmp randoms, 2
	if e call color3
	cmp randoms, 3
	if e call color4
	cmp randoms, 4
	if e call color5
	cmp randoms, 5
	if e call color6
	cmp randoms, 6
	if e call color7
	cmp randoms, 7
	if e call color8
	cmp randoms, 8
	if e call color9
	cmp randoms, 9
	if e call color10		
decepgame3:
	cmp decepcount, 11
	if e jmp fgames3
	if ne jmp decepgo
decepgo:
	call random2
	
	cmp randoms, 0
	if e call boxes1
	cmp randoms, 1
	if e call boxes2
	cmp randoms, 2
	if e call boxes3
	cmp randoms, 3
	if e call boxes4
	cmp randoms, 4
	if e call boxes5
	cmp randoms, 5
	if e call boxes6
	cmp randoms, 6
	if e call boxes7
	cmp randoms, 7
	if e call boxes8
	cmp randoms, 8
	if e call boxes9
	cmp randoms, 9
	if e call boxes10		
fgames3:
	cmp fgamecount, 11
	if e call gameover
	if ne jmp fgamego
fgamego:
	call random2
	
	cmp randoms, 0
	if e call flipgame1
	cmp randoms, 1
	if e call flipgame2
	cmp randoms, 2
	if e call flipgame3
	cmp randoms, 3
	if e call flipgame4
	cmp randoms, 4
	if e call flipgame5
	cmp randoms, 5
	if e call flipgame6
	cmp randoms, 6
	if e call flipgame7
	cmp randoms, 7
	if e call flipgame8
	cmp randoms, 8
	if e call flipgame9
	cmp randoms, 9
	if e call flipgame10		
	
ret
randomprob endp
;------------flipgames
flipgame1 proc near

mov ax, 03h
int 10h

mov bh, 65h
call tilechoice1

mov bh, 56h
call tilechoice2

mov bh, 56h
call tilechoice3

call abc
call memo

ngayo:
	call ask
	cmp al, 'm'
	if e jmp flipques1
	cmp al,'x'
	if e call gameover
	if ne jmp ngayo

flipques1:

	call black

	mov bh, 56h
	call q1

	mov bh, 65h
	call q2

	mov bh, 56h
	call q3

	call abc

	mov dh, 20
	mov dl, 36
	call cursor

balik:

	call ask
	cmp al,'b'
	if e jmp second1
	cmp al,'c'
	if e jmp second2
	cmp al,'x'
	if e call gameover
	if ne jmp balik

second1:
	call tilechoice2
	mov bh, 56h
	call scroll
	call ask
	cmp al,'a'
	if e jmp third
	cmp al,'x'
	if e call gameover
	if ne jmp second1

second2:
	call tilechoice3
	mov bh, 56h
	call scroll

	call ask
	cmp al,'a'
	if e jmp third
	cmp al,'x'
	if e call gameover
	if ne jmp second2

third:
	call tilechoice1
	mov bh, 65h
	call scroll
	call ask
	cmp al,'b'
	if e jmp sakto1
	cmp al,'x'
	if e call gameover
	cmp al, 'c'
	if e jmp sakto2
	cmp al,'x'
	if e call gameover
	if ne jmp thirds

thirds:
	inc fgamecount
	jmp fgames3

sakto1:
	call tilechoice2
	mov bh, 56h
	call scroll
	jmp sd1

sakto2:
	call tilechoice3
	mov bh, 56h
	call scroll
	jmp sd1

sd1:
	inc score
	inc fgamecount
	jmp fgames3

ret
flipgame1 endp

memo proc near

mov ch,20
mov cl,36
mov dh,20
mov dl,47
mov bh,0e1h
call scroll

mov dh, 20
mov dl, 36
call cursor

lea dx, mem
call print

mov dh, 20
mov dl, 47 
call cursor

ret
memo endp
;-----------coordinates para background ray alisdan

black proc near

mov ch, 0
mov cl, 0
mov dh, 24
mov dl, 79
mov bh,00h
call scroll



ret
black endp


q1 proc near

mov ch,2
mov cl,32
mov dh,3
mov dl,37
call scroll

ret
q1 endp

q2 proc near

mov ch,2
mov cl,39
mov dh,3
mov dl,44
call scroll

ret
q2 endp

q3 proc near

mov ch,2
mov cl,46
mov dh,3
mov dl,51
call scroll

ret
q3 endp

tilechoice1 proc near

mov ch,10
mov cl,23
mov dh,15
mov dl,33
call scroll

ret
tilechoice1 endp

tilechoice2 proc near

mov ch,10
mov cl,35
mov dh,15
mov dl,45
call scroll

ret
tilechoice2 endp

tilechoice3 proc near

mov ch,10
mov cl,47
mov dh,15
mov dl,57
call scroll

ret
tilechoice3 endp

abc proc near

mov dh,12
mov dl,28
call cursor

mov ch,12
mov cl,28
mov dh,12
mov dl,28
mov bh, 07h
call scroll

lea dx, lettera
call print

mov dh,12
mov dl,40
call cursor

mov ch,12
mov cl,40
mov dh,12
mov dl,40
mov bh, 07h
call scroll
lea dx, letterb
call print

mov dh,12
mov dl,52
call cursor

mov ch,12
mov cl,52
mov dh,12
mov dl,52
mov bh, 07h
call scroll

lea dx, letterc
call print
ret
abc endp

flipgame2 proc near

	mov ax, 03h
	int 10h

	mov bh, 0e0h
	call tilechoice1

	mov bh,  0a0h
	call tilechoice2

	mov bh, 0b0h
	call tilechoice3

	call abc

	call memo

as1:

	call ask
	cmp al,'m'
	if e jmp fq1
	cmp al,'x'
	if e call gameover
	if ne jmp as1
fq1:
	call black
	call abc

	mov bh, 0b0h
	call q1

	mov bh, 0e0h
	call q2

	mov  bh, 0a0h
	call q3

an1:
	call ask
	cmp al,'c'
	if e jmp sk1

	cmp al,'x'
	if e call gameover
	if ne jmp an1

sk1:

mov bh, 0b0h
call tilechoice3
call ask
cmp al, 'a'
if e jmp sk2
cmp al,'x'
if e call gameover
if ne jmp sk1

sk2:

mov bh, 0e0h 
call tilechoice1
call ask
cmp al, 'b'
if e jmp sk3
cmp al,'x'
if e call gameover
if ne jmp wr

wr:
	inc fgamecount
	jmp fgames3
sk3:
	mov bh,0a0h
	call tilechoice2
	inc fgamecount
	inc score
	jmp fgames3

ret
flipgame2 endp

flipgame3 proc near

	mov ax, 03h
	int 10h

	mov bh, 32h
	call tilechoice1

	mov bh,  45h
	call tilechoice2

	mov bh, 0d0h
	call tilechoice3


	call abc

	call memo

as2:

	call ask
	cmp al,'m'
	if e jmp fq2
	cmp al,'x'
	if e call gameover
	if ne jmp as2
fq2:
	call black
	call abc

	mov bh, 32h
	call q1

	mov bh, 45h
	call q2

	mov  bh, 0d0h
	call q3

hi:	
	call ask
	cmp al, 'a'
	if e jmp st1
	cmp al,'x'
	if e call gameover
	if ne jmp hi

st1:
	mov bh, 32h
	call tilechoice1
	call ask
	cmp al, 'b'
	if e jmp st2
	cmp al,'x'
	if e call gameover
	if ne jmp st1

st2:

	mov bh, 45h
	call tilechoice2
	call ask
	cmp al,'c'
	if e jmp st3
	cmp al,'x'
	if e call gameover
	if ne jmp wr1

wr1:
	inc fgamecount
	jmp fgames3
st3:
	mov bh, 0d0h
	call tilechoice3
	inc score
	inc fgamecount
	jmp fgames3

ret
flipgame3 endp

flipgame4 proc near
mov ax, 03h
int 10h

	mov bh, 32h
	call tilechoice1

	mov bh,  12h
	call tilechoice2
	
	mov bh, 96h
	call tilechoice3


	call abc

	call memo

as3:

	call ask
	cmp al,'m'
	if e jmp fq3
	cmp al,'x'
	if e call gameover
	if ne jmp as3
fq3:
	call black
	call abc

	mov bh, 12h
	call q1

	mov bh, 32h
	call q2

	mov  bh, 96h
	call q3

ad:

	call ask
	cmp al, 'b'
	if e jmp ad1
	cmp al,'x'
	if e call gameover
	if ne jmp ad

ad1:

	mov bh, 12h
	call tilechoice2
	call ask
	cmp al,'a'
	if e jmp ad2
	cmp al,'x'
	if e call gameover
	if ne jmp ad1

ad2:
	mov bh, 32h
	call tilechoice1
	call ask
	cmp al,'c'
	if e jmp ad3
	cmp al,'x'
	if e call gameover
	if ne jmp wr2

wr2:
	inc fgamecount
	jmp fgames3
ad3:
	mov bh, 96h
	call tilechoice3
	inc score
	inc fgamecount
	jmp fgames3
ret
flipgame4 endp

flipgame5 proc near
mov ax, 03h
int 10h

	mov bh, 0e0h
	call tilechoice1

	mov bh,  0a0h
	call tilechoice2

	mov bh, 0b0h
	call tilechoice3


	call abc

	call memo

as4:

	call ask
	cmp al,'m'
	if e jmp fq4	
	cmp al,'x'
	if e call gameover
	if ne jmp as4
fq4:
	call black
	call abc

	mov bh, 0b0h
	call q1

	mov bh, 0e0h
	call q2

	mov  bh, 0a0h
	call q3


aq:

	call ask
	cmp al,'c'
	if e jmp aq1
	cmp al,'x'
	if e call gameover
	if ne jmp aq

aq1:
	mov bh, 0b0h
	call tilechoice3
	call ask
	cmp al, 'a'
	if e jmp aq2
	cmp al,'x'
	if e call gameover
	if ne jmp aq1

aq2:
	mov bh, 0a0h
	call tilechoice1
	cmp al,'b'
	if e jmp aq3
	cmp al,'x'
	if e call gameover
	if ne jmp wr3

wr3:
	inc fgamecount
	jmp fgames3
aq3:

	mov bh, 0e0h
	call tilechoice2
	inc score
	inc fgamecount
	jmp fgames3

ret
flipgame5 endp

flipgame6 proc near
mov ax, 03h
int 10h

	mov bh, 0e0h
	call tilechoice1

	mov bh,  0f0h
	call tilechoice2

	mov bh, 0b0h
	call tilechoice3


	call abc

	call memo

as5:

	call ask
	cmp al,'m'
	if e jmp fq5
	cmp al,'x'
	if e call gameover
	if ne jmp as5
fq5:
	call black
	call abc

	mov bh, 0b0h
	call q1

	mov bh, 0e0h
	call q2

	mov  bh, 0f0h
	call q3

aha:

	call ask
	cmp al,'c'
	if e jmp ah1
	cmp al,'x'
	if e call gameover
	if ne jmp aha

ah1:
	mov bh, 0b0h
	call tilechoice1
	call ask
	cmp al,'a'
	if e jmp ah2
	cmp al,'x'
	if e call gameover
	if ne jmp ah1

ah2:
	mov bh, 0e0h
	call tilechoice3
	call ask
	cmp al,'b'
	if e jmp ah3
	cmp al,'x'
	if e call gameover
	if ne jmp wr4

wr4:
	inc fgamecount
	jmp fgames3

ah3:
	mov bh,0f0h
	call tilechoice2
	inc score
	inc fgamecount
	jmp fgames3

ret
flipgame6 endp

flipgame7 proc near

mov ax, 03h
int 10h

	mov bh, 32h
	call tilechoice1

	mov bh,  87h
	call tilechoice2

	mov bh, 77h
	call tilechoice3


	call abc

	call memo

as6:

	call ask
	cmp al,'m'
	if e jmp fq6
	cmp al,'x'
	if e call gameover
	if ne jmp as6
fq6:
	call black
	call abc

	mov bh, 87h
	call q1

	mov bh, 32h
	call q2

	mov  bh, 77h
	call q3

aw:

	call ask
	cmp al, 'b'
	if e jmp aw1
	cmp al,'x'
	if e call gameover
	if ne jmp aw

aw1:

	mov bh, 87h
	call tilechoice2
	call ask
	cmp al,'a'
	if e jmp aw2
	cmp al,'x'
	if e call gameover
	if ne jmp aw1

aw2:
	mov bh, 32h
	call tilechoice1
	call ask
	cmp al,'c'
	if e jmp aw3
	cmp al,'x'
	if e call gameover
	if ne jmp wr5

wr5:
	inc fgamecount
	jmp fgames3

aw3:
	mov bh, 77h
	call tilechoice3

	inc fgamecount
	inc score 
	jmp fgames3

ret
flipgame7 endp

flipgame8 proc near

mov ax, 03h
int 10h

mov bh, 0d0h
call tilechoice1

mov bh,  0f0h
call tilechoice2

mov bh, 0c0h
call tilechoice3


call abc

call memo

as7:

	call ask
	cmp al,'m'
	if e jmp fq7
	cmp al,'x'
	if e call gameover
	if ne jmp as7

fq7:
	call black
	call abc

	mov bh, 0d0h
	call q1

	mov bh, 0f0h
	call q2

	mov  bh, 0c0h
	call q3
	call memo

hiq:	
	call ask
	cmp al, 'a'
	if e jmp stq1
	cmp al,'x'
	if e call gameover
	if ne jmp hiq

stq1:
	mov bh, 0d0h
	call tilechoice1
	call ask
	cmp al, 'b'
	if e jmp stq2
	cmp al,'x'
	if e call gameover
	if ne jmp stq1

stq2:

	mov bh, 0f0h
	call tilechoice2
	call ask
	cmp al,'c'
	if e jmp stq3
	cmp al,'x'
	if e call gameover
	if ne jmp wr6

wr6:
	inc fgamecount
	jmp fgames3

stq3:
	mov bh, 0c0h
	call tilechoice3
	inc score
	inc fgamecount
	jmp fgames3
ret
flipgame8 endp

flipgame9 proc near

mov ax, 03h
int 10h

	mov bh, 0c0h
	call tilechoice1

	mov bh,  0d0h
	call tilechoice2

	mov bh, 0b0h
	call tilechoice3


	call abc

	call memo

as8:

	call ask
	cmp al,'m'
	if e jmp fq8
	cmp al,'x'
	if e call gameover
	if ne jmp as8
fq8:
	call black
	call abc

	mov bh, 0b0h
	call q1

	mov bh, 0c0h
	call q2

	mov  bh, 0d0h
	call q3

agob:

	 call ask
 	cmp al,'c'
 	if e jmp ag1
  	cmp al,'x'
	if e  call gameover
	if ne jmp agob
ag1:
	mov bh, 0b0h
	call tilechoice3
	call ask
	cmp al,'a'
	if e jmp ag2
	cmp al,'x'
	if e call gameover
	if ne jmp ag1
ag2:
	mov bh, 0c0h
	call tilechoice1
	call ask
	cmp al,'b'
	if e jmp ag3
	cmp al,'x'
	if e call gameover
	if ne jmp wr7

wr7:
	inc fgamecount
	jmp fgames3

ag3:
	mov bh,	0d0h
	call tilechoice2
	inc score	
	inc fgamecount
	jmp fgames3
ret
flipgame9 endp


flipgame10 proc near

mov ax, 03h
int 10h

mov bh, 0a0h
call tilechoice1

mov bh,  0c0h
call tilechoice2

mov bh, 0e0h
call tilechoice3


call abc

call memo

as9:

	call ask
	cmp al,'m'
	if e jmp fq9
	cmp al,'x'
if e call gameover
if ne jmp as9
fq9:
call black
call abc

mov bh, 0a0h
call q1


mov bh, 0e0h
call q2

mov  bh, 0c0h
call q3

arw:

	call ask
	cmp al,'a'
	if e jmp arw1
	cmp al,'x'
	if e call gameover
	if ne jmp arw
arw1:
	mov bh, 0a0h
	call tilechoice1
	call ask
	cmp al,'c'
	if e jmp arw2
	cmp al,'x'
	if e call gameover
	if ne jmp arw1
arw2:
	mov bh, 0e0h
	call tilechoice3
	call ask
	cmp al,'b'
	if e jmp arw3
	cmp al,'x'
	if e call gameover
	if ne jmp wr8

wr8:
	inc fgamecount
	jmp fgames3

arw3:
	mov bh, 0c0h
	call tilechoice2
	inc score
	inc fgamecount
	jmp fgames3
ret
flipgame10 endp
;------------
;-------------------------------------equation games
game1p proc near
	mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 32
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 32
	call cursor
	
	lea dx, game1
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game1ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game1ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game1ch2
	call print
	
	mov dh, 14
	mov dl, 47
	call cursor
	
	lea dx, game1ch4
	call print

getans:	
	mov dh, 16
	mov dl, 39
	call cursor

	call ask
	cmp al, 'a'
	if e jmp canswer
	cmp al,'x'
	if e call gameover
	if ne jmp A
A:
	cmp al, 'A'
	if e jmp canswer
	if ne jmp war1
war1:
	inc eqgamecount
	jmp equagame5


canswer:
	inc score	
       	inc eqgamecount
	jmp equagame5
ret
game1p endp
;--------------
game2p proc near

    	mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 34
	call cursor
	
	lea dx, game2
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game2ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game2ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game2ch2
	call print
	
	mov dh, 14
	mov dl, 47
	call cursor
	
	lea dx, game2ch4
	call print

getans2:	
	mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'd'
	if e jmp canswer2
	cmp al,'x'
	if e call gameover
	if ne jmp A2
A2:
	cmp al, 'D'
	if e jmp canswer2
	if ne jmp war2
war2:
	inc eqgamecount
	jmp equagame5
canswer2:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game2p endp
;------------
game3p proc near

	mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 34
	call cursor
	
	lea dx, game3
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game3ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game3ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game3ch2
	call print
	
	mov dh, 14
	mov dl, 47
	call cursor
	
	lea dx, game3ch4
	call print

getans3:	
	mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'c'
	if e jmp canswer3
	if ne jmp A3
A3:
	cmp al, 'C'
	if e jmp canswer3
	
	cmp al,'x'
	if e call gameover
	if ne jmp war3
war3:
	inc eqgamecount
	jmp equagame5
canswer3:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game3p endp
;------------------------
game4p  proc near

	mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 34
	call cursor
	
	lea dx, game4
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game4ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game4ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game4ch2
	call print
	
	mov dh, 14
	mov dl, 47
	call cursor
	
	lea dx, game4ch4
	call print

getans4:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'd'
	if e jmp canswer4
	
	cmp al,'x'
if e call gameover
if ne jmp A4
A4:
	cmp al, 'D'
	if e jmp canswer4
	cmp al,'x'
	if e call gameover
	if ne jmp war4
war4:
	inc eqgamecount
	jmp equagame5
canswer4:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game4p endp
;--------------------
game5p proc near

mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 36
	call cursor
	
	lea dx, game5
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game5ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game5ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game5ch2
	call print
	
	mov dh, 14
	mov dl, 47
	call cursor
	
	lea dx, game5ch4
	call print

getans5:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'b'
	if e jmp canswer5
	if ne jmp A5
A5:
	cmp al, 'B'
	if e jmp canswer5
	
	cmp al,'x'
	if e call gameover
	if ne jmp war5
war5:
	inc eqgamecount
	jmp equagame5
canswer5:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game5p endp
;------------
game6p proc near

mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 36
	call cursor
	
	lea dx, game6
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game6ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game6ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game6ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game6ch4
	call print

getans6:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'b'
	if e jmp canswer6
	
	cmp al,'x'
if e call gameover
if ne jmp A6
A6:
	cmp al, 'B'
	if e jmp canswer6

	cmp al,'x'
	if e call gameover

	if ne jmp war51
war51:
	inc eqgamecount
	jmp equagame5
canswer6:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game6p endp
;------------
game7p proc near

mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 36
	call cursor
	
	lea dx, game7
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game7ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game7ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game7ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game7ch4
	call print

getans7:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'd'
	if e jmp canswer7

	cmp al,'x'
if e call gameover
	if ne jmp A7
A7:
	cmp al, 'D'
	if e jmp canswer7
	
	cmp al,'x'
	if e call gameover
	if ne jmp war6
war6:
	inc eqgamecount
	jmp equagame5
canswer7:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game7p endp
;-----------
game8p proc near

mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 36
	call cursor
	
	lea dx, game8
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game8ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game8ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game8ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game8ch4
	call print

getans8:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'a'
	if e jmp canswer8
	
	cmp al,'x'
if e call gameover
if ne jmp A8
A8:
	cmp al, 'A'
	if e jmp canswer8
	
	cmp al,'x'
	if e call gameover
	if ne jmp war7
war7:
	inc eqgamecount
	jmp equagame5
canswer8:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game8p endp
;-----------
game9p proc near

mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 36
	call cursor
	
	lea dx, game9
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game9ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game9ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game9ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game9ch4
	call print

getans9:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'd'
	if e jmp canswer9
	
	cmp al,'x'
	if e call gameover
	if ne jmp A9
A9:
	cmp al, 'D'
	if e jmp canswer9
	
	cmp al,'x'
	if e call gameover
	if ne jmp war8
war8:
	inc eqgamecount
	jmp equagame5
canswer9:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game9p endp
;-----------
game10p proc near

mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 36
	call cursor
	
	lea dx, game10
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game10ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game10ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game10ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game10ch4
	call print

getans10:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'a'
	if e jmp canswer10
	
	cmp al,'x'
	if e call gameover
	if ne jmp A10
A10:
	cmp al, 'A'
	if e jmp canswer10
	
	cmp al,'x'
	if e call gameover
	if ne jmp war9
war9:
	inc eqgamecount
	jmp equagame5
canswer10:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game10p endp
;-----------
game11p proc near

mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 36
	call cursor
	
	lea dx, game11
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game11ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game11ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game11ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game11ch4
	call print

getans11:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'a'
	if e jmp canswer11
	
	cmp al,'x'
if e call gameover
if ne jmp A11
A11:
	cmp al, 'A'
	if e jmp canswer11
	
	cmp al,'x'
	if e call gameover
	if ne jmp war10
war10:
	inc eqgamecount
	jmp equagame5
canswer11:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game11p endp
;-----------
game12p proc near

mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 34
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 36
	call cursor
	
	lea dx, game12
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game12ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game12ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game12ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game12ch4
	call print

getans12:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'c'
	if e jmp canswer12
	
	cmp al,'x'
if e call gameover
if ne jmp A12
A12:
	cmp al, 'C'
	if e jmp canswer12
	
	cmp al,'x'
	if e call gameover
	if ne jmp war11
war11:
	inc eqgamecount
	jmp equagame5
canswer12:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game12p endp
;-----------
game13p proc near

    mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 33
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 33
	call cursor
	
	lea dx, game13
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game13ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game13ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game13ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game13ch4
	call print

getans13:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'b'
	if e jmp canswer13
	
	cmp al,'x'
	if e call gameover
	if ne jmp A13
A13:
	cmp al, 'B'
	if e jmp canswer13
	
	cmp al,'x'
	if e call gameover
	if ne jmp war12
war12:
	inc eqgamecount
	jmp equagame5
canswer13:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game13p endp
;-----------
game14p proc near

    mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 33
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 33
	call cursor
	
	lea dx, game14
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game14ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game14ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game14ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game14ch4
	call print

getans14:	
mov dh, 16
	mov dl, 39
	call cursor
	call ask
	cmp al, 'a'
	if e jmp canswer14

	cmp al,'x'
if e call gameover
	if ne jmp A14
A14:
	cmp al, 'A'
	if e jmp canswer14
	
	cmp al,'x'
if e call gameover
if ne jmp war13
war13:
	inc eqgamecount
	jmp equagame5
canswer14:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game14p endp

;-----------
game15p proc near

    mov ch, 06
	mov cl, 20
	mov dh,	18
	mov dl,	60
	mov bh, 8bh
	call scroll
	call gamebox
	
	mov ch, 09
	mov cl, 33
	mov dh, 09
	mov dl, 49
	mov bh, 8ah
	call scroll
	
	mov dh, 09
	mov dl, 33
	call cursor
	
	lea dx, game15
	call print
	
	
	mov dh, 12
	mov dl, 28 
	call cursor
	
	lea dx, game15ch1
	call print
	
	mov dh, 12
	mov dl, 47
	call cursor
	
	lea dx, game15ch3
	call print
	
	mov dh, 14
	mov dl, 28 
	call cursor
	
	lea dx, game15ch2
	call print
	
	mov dh, 14	
	mov dl, 47
	call cursor
	
	lea dx, game15ch4
	call print

getans15:	
mov dh, 16
	mov dl, 39
	call cursor
maos:
	call ask
	cmp al, 'd'
	if e jmp canswer15
	cmp al,'x'
	if e call gameover

	if ne jmp A15
A15:
	cmp al, 'D'
	if e jmp canswer15
	
	cmp al,'x'
	if e call gameover
	if ne jmp war14
war14:
	inc eqgamecount
	jmp equagame5
canswer15:
	inc score
	inc eqgamecount
	jmp equagame5
ret
game15p endp

;-----------------------
color1 proc near

mov ax, 03h
int 10h

;cent
mov bh,5bh
call cent1

mov bh,3bh
call cent2
;left

mov bh,5bh
call leftbox1

mov bh,5bh
call leftbox2
;ryt

mov bh,4bh
call rytbox1

mov bh,1bh
call rytbox2

call choiceabc

againx:

	call ask
	cmp al,'q'
	if e jmp maox
	cmp al,'w'
	if e jmp maox
	cmp al,'a'
	if e jmp maox
	
	cmp al,'x'
	if e call gameover
	if ne jmp wro1

wro1:
	inc taptilecount
	jmp taptile3


maox:
	inc score
	inc taptilecount
	jmp taptile3
ret
color1 endp

;--------coordinates para background ray alisdan
cent1 proc near

mov ch,5
mov cl,30
mov dh,9
mov dl,50
call scroll


ret
cent1 endp


cent2 proc near


mov ch,12
mov cl,30
mov dh,16
mov dl,50
call scroll


ret
cent2 endp

leftbox1 proc near

mov ch,5
mov cl,5
mov dh,9
mov dl,25
call scroll

ret
leftbox1 endp

leftbox2 proc near

mov ch,12
mov cl,5
mov dh,16
mov dl,25
call scroll

ret
leftbox2 endp

rytbox1 proc near

mov ch,5
mov cl,55
mov dh,9
mov dl,75
call scroll

ret
rytbox1 endp

rytbox2 proc near

mov ch,12
mov cl,55
mov dh,16
mov dl,75
call scroll

ret
rytbox2 endp

choiceabc proc near

mov dh,7
mov dl,15
call cursor

lea dx,ch1
call print


mov dh,7
mov dl,40
call cursor
lea dx,ch2
call print

mov dh,7
mov dl,65
call cursor
lea dx,ch3
call print

mov dh,14
mov dl,15
call cursor
lea dx,ch4
call print

mov dh,14
mov dl,40
call cursor
lea dx,ch5
call print

mov dh,14
mov dl,65 ;35-----------------------; ikaduhang bug
call cursor
lea dx,ch6
call print


ret
choiceabc endp
;--------------
color2 proc near

mov ax, 03h
int 10h

;cent
mov bh,0abh
call cent1

mov bh,0abh
call cent2

;left

mov bh,8bh
call leftbox1


mov bh,5bh
call leftbox2
;ryt


mov bh,3bh
call rytbox1


mov bh,0abh
call rytbox2

call choiceabc


again1:

	call ask
	cmp al,'w'
	if e jmp mao1
	cmp al,'s'
	if e jmp mao1
	cmp al,'d'
	if e jmp mao1
	
	cmp al,'x'
	if e call gameover
	if ne jmp wro2

wro2:
	inc taptilecount
	jmp taptile3

mao1:
	inc score
	inc taptilecount
	jmp taptile3
ret
color2 endp
;---------------
color3 proc near

mov ax, 03h
int 10h

;cent
mov bh,0fbh
call cent1

mov bh,0abh
call cent2

;left

mov bh,0fbh
call leftbox1


mov bh,0abh
call leftbox2
;ryt


mov bh,0fbh
call rytbox1


mov bh,9bh
call rytbox2

call choiceabc


again2:

	call ask
	cmp al,'w'
	if e jmp mao2
	cmp al,'q'
	if e jmp mao2
	cmp al,'e'
	if e jmp mao2

	cmp al,'x'
if e call gameover	
if ne jmp wro3

wro3:
	inc taptilecount
	jmp taptile3
mao2:
	inc score
	inc taptilecount
	jmp taptile3
ret
color3 endp
;-------------
color4 proc near


mov ax, 03h
int 10h

;cent
mov bh,0abh
call cent1

mov bh,0abh
call cent2

;left

mov bh,0ebh
call leftbox1


mov bh,0dbh
call leftbox2
;ryt


mov bh,7bh
call rytbox1


mov bh,0abh
call rytbox2

call choiceabc


again3:

	call ask
	cmp al,'w'
	if e jmp mao3
	cmp al,'s'
	if e jmp mao3
	cmp al,'d'
	if e jmp mao3

	cmp al,'x'
	if e call gameover
	if ne jmp wro4

wro4:
	inc taptilecount
	jmp taptile3
mao3:
	inc score
	inc taptilecount
	jmp taptile3
ret
color4 endp
;--------------
color5 proc near

mov ax, 03h
int 10h

;cent
mov bh,0cbh
call cent1

mov bh,0cbh
call cent2

;left

mov bh,0ebh
call leftbox1


mov bh,0cbh
call leftbox2
;ryt


mov bh,7bh
call rytbox1


mov bh,0abh
call rytbox2

call choiceabc


again4:

	call ask
	cmp al,'w'
	if e jmp mao4
	cmp al,'s'
	if e jmp mao4
	cmp al,'a'
	if e jmp mao4
	cmp al,'x'
	if e call gameover	
	if ne jmp wro5

wro5:
	inc taptilecount
	jmp taptile3
mao4:
	inc score
	inc taptilecount
	jmp taptile3
ret
color5 endp
;--------------
color6 proc near

mov ax, 03h
int 10h

;cent
mov bh,0fbh
call cent1

mov bh,0abh
call cent2

;left

mov bh,0fbh
call leftbox1


mov bh,0dbh
call leftbox2
;ryt


mov bh,0cbh
call rytbox1


mov bh,0fbh
call rytbox2

call choiceabc


again5:

	call ask
	cmp al,'w'
	if e jmp mao5
	cmp al,'q'
	if e jmp mao5
	cmp al,'d'
	if e jmp mao5
	cmp al,'x'
	if e call gameover	
	if ne jmp wro6

wro6:
	inc taptilecount
	jmp taptile3
mao5:	
	inc score
	inc taptilecount
	jmp taptile3
ret
color6 endp
;----------------------

color7 proc near


mov ax, 03h
int 10h

;cent
mov bh,1bh
call cent1

mov bh,1bh
call cent2

;left

mov bh,1bh
call leftbox1


mov bh,0cbh
call leftbox2
;ryt


mov bh,7bh
call rytbox1


mov bh,0ebh
call rytbox2

call choiceabc


again6:

	call ask
	cmp al,'w'
	if e jmp mao6
	cmp al,'s'
	if e jmp mao6
	cmp al,'q'
	if e jmp mao6
	cmp al,'x'
	if e call gameover	
	if ne jmp wro7

wro7:
	inc taptilecount
	jmp taptile3
mao6:
	inc score
	inc taptilecount
	jmp taptile3
ret
color7 endp

color8 proc near

mov ax, 03h
int 10h

;cent
mov bh,0abh
call cent1

mov bh,0abh
call cent2

;left

mov bh,0ebh
call leftbox1


mov bh,0dbh
call leftbox2
;ryt


mov bh,7bh
call rytbox1


mov bh,0abh
call rytbox2

call choiceabc


again7:

	call ask
	cmp al,'w'
	if e jmp mao7
	cmp al,'s'
	if e jmp mao7
	cmp al,'d'
	if e jmp mao7
	cmp al,'x'
	if e call gameover	
	if ne jmp wro8

wro8:
	inc taptilecount
	jmp taptile3
mao7:
	inc score
	inc taptilecount
	jmp taptile3
ret
color8 endp
;-------------------------
color9 proc near

mov ax, 03h
int 10h

;cent
mov bh,4bh
call cent1

mov bh,3bh
call cent2
o     ;---------- naay o
;left

mov bh,3bh
call leftbox1


mov bh,3bh
call leftbox2
;ryt


mov bh,4bh
call rytbox1


mov bh,5bh
call rytbox2

call choiceabc


again8:

	call ask
	cmp al,'s'
	if e jmp mao8
	cmp al,'q'
	if e jmp mao8
	cmp al,'a'
	if e jmp mao8
	cmp al,'x'
	if e call gameover	
	if ne jmp wro9

wro9:
	inc taptilecount
	jmp taptile3
mao8:
	inc score
	inc taptilecount
	jmp taptile3
ret
color9 endp
;--------------
color10 proc near
	mov ax, 03h
	int 10h

;cent	
	mov bh,0abh
	call cent1

	mov bh,0cbh
	call cent2

;left
	mov bh,0ebh
	call leftbox1

	mov bh,0cbh
	call leftbox2
;ryt
	mov bh,0cbh
	call rytbox1

	mov bh,0abh
	call rytbox2

	call choiceabc


again9:

	call ask
	cmp al,'s'
	if e jmp mao9
	cmp al,'a'
	if e jmp mao9
	cmp al,'e'
	if e jmp mao9
	cmp al,'x'
	if e call gameover	
	if ne jmp wro10

wro10:
	inc taptilecount
	jmp taptile3
mao9:
	inc score
	inc taptilecount
	jmp taptile3
ret
color10 endp
;-----------------------------------------------------------end of color majority game

;-------color deception

bo1 proc near

mov ch, 6
mov cl, 27
mov dh, 11
mov dl, 37
call scroll


ret
bo1 endp

bo2 proc near

mov ch, 14
mov cl, 27
mov dh, 19
mov dl, 37
call scroll


ret
bo2 endp

bo3 proc near

mov ch, 6
mov cl, 41
mov dh, 11
mov dl, 51
call scroll


ret
bo3 endp

bo4 proc near
mov ch, 14
mov cl, 41
mov dh, 19
mov dl, 51
call scroll

ret
bo4 endp

;---------set as background daan para ang foreground nay alisdan

bob1 proc near

mov ch, 8
mov cl, 28
mov dh,8
mov dl,36
call scroll

mov dh, 8
mov dl, 30
call cursor

ret
bob1 endp

bob2 proc near

mov ch, 16
mov cl, 28
mov dh,16
mov dl,36
call scroll

mov dh, 16
mov dl, 30
call cursor

ret
bob2 endp

bob3 proc near

mov ch, 8
mov cl, 42
mov dh,8
mov dl,50
call scroll

mov dh, 8
mov dl, 44
call cursor

ret
bob3 endp

bob4 proc near

mov ch, 16
mov cl, 42
mov dh,16
mov dl,50
call scroll

mov dh, 16
mov dl, 44
call cursor


ret
bob4 endp
;--------------------
boxes1 proc near

mov ax, 03h
int 10h


mov bh, 21h
call bo1
mov bh, 02h
call bob1
lea dx, gre
call print

mov bh, 41h
call bo2
mov bh, 04h
call bob2
lea dx, red
call print

mov bh, 53h
call bo3
mov bh, 06
call bob3
lea dx, whi
call print


mov bh, 34h
call bo4
mov bh, 03h
call bob4
lea dx, cyan
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check1:

call ask
cmp al,'w'
if e jmp cork1
cmp al,'x'
if e call gameover	
if ne jmp wer1

wer1:
inc decepcount
jmp decepgame3

cork1:
inc score
inc decepcount
jmp decepgame3
ret
boxes1 endp

boxes2 proc near

mov ax, 03h
int 10h


mov bh, 31h
call bo1
mov bh, 03h
call bob1
lea dx, cyan
call print

mov bh, 61h
call bo2
mov bh, 07h
call bob2
lea dx, whi
call print

mov bh, 53h
call bo3
mov bh, 05h
call bob3
lea dx, mag
call print


mov bh, 0c4h
call bo4
mov bh, 0ch
call bob4
lea dx, red
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check2:

call ask
cmp al,'a'
if e jmp cork2
cmp al,'x'
if e call gameover	
if ne jmp wer2

wer2:
inc decepcount
jmp decepgame3

cork2:
inc score
inc decepcount
jmp decepgame3
boxes2 endp

;---------------------------
boxes3 proc near

mov ax, 03h
int 10h


mov bh, 0c1h
call bo1
mov bh, 0ch
call bob1
lea dx, red
call print

mov bh, 61h
call bo2
mov bh, 07h
call bob2
lea dx, blu
call print

mov bh, 0a3h
call bo3
mov bh, 0ah
call bob3
lea dx, gre
call print


mov bh, 0d4h
call bo4
mov bh, 0dh
call bob4
lea dx, mag
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check3:

call ask
cmp al,'a'
if e jmp cork3
cmp al,'x'
if e call gameover	
if ne jmp wer3

wer3:
inc decepcount
jmp decepgame3

cork3:
inc score
inc decepcount
jmp decepgame3
ret
boxes3 endp

boxes4 proc near

mov ax, 03h
int 10h


mov bh, 0c1h
call bo1
mov bh, 0dh
call bob1
lea dx, red
call print

mov bh, 11h
call bo2
mov bh, 01h
call bob2
lea dx, blu
call print

mov bh, 0a3h
call bo3
mov bh, 0ah
call bob3
lea dx, gre
call print


mov bh, 0d4h
call bo4
mov bh, 0dh
call bob4
lea dx, mag
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check4:

call ask
cmp al,'q'
if e jmp cork4
cmp al,'x'
if e call gameover	
if ne jmp wer4

wer4:
inc decepcount
jmp decepgame3

cork4:
inc score
dec decepcount
jmp decepgame3
boxes4 endp

boxes5 proc near


mov ax, 03h
int 10h


mov bh, 0c1h
call bo1
mov bh, 0ch
call bob1
lea dx, blu
call print

mov bh, 21h
call bo2
mov bh, 04h
call bob2
lea dx, mag
call print

mov bh, 0e3h
call bo3
mov bh, 0eh
call bob3
lea dx, yel
call print


mov bh, 14h
call bo4
mov bh, 01h
call bob4
lea dx, blu
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check5:

call ask
cmp al,'a'
if e jmp cork5
cmp al,'x'
if e call gameover	
if ne jmp wer5

wer5:
inc decepcount
jmp decepgame3

cork5:
inc score
inc decepcount
jmp decepgame3
boxes5 endp

boxes6 proc near


mov ax, 03h
int 10h


mov bh, 21h
call bo1
mov bh, 02h
call bob1
lea dx, gre
call print

mov bh, 0f1h
call bo2
mov bh, 0fh
call bob2
lea dx, whi
call print

mov bh, 0a3h
call bo3
mov bh, 0eh
call bob3
lea dx, blu
call print


mov bh, 0e4h
call bo4
mov bh, 0eh
call bob4
lea dx, yel
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check6:

call ask
cmp al,'w'
if e jmp cork6
cmp al,'x'
if e call gameover	
if ne jmp wer6

wer6:
inc decepcount
jmp decepgame3


cork6:
inc score
inc decepcount
jmp decepgame3
ret
boxes6 endp

boxes7 proc near


mov ax, 03h
int 10h


mov bh, 21h
call bo1
mov bh, 02h
call bob1
lea dx, gre
call print

mov bh, 0f1h
call bo2
mov bh, 0fh
call bob2
lea dx, whi
call print

mov bh, 53h
call bo3
mov bh, 05h
call bob3
lea dx, gre
call print


mov bh, 14h
call bo4
mov bh, 01h
call bob4
lea dx, blu
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check7:

call ask
cmp al,'w'
if e jmp cork7
cmp al,'x'
if e call gameover	
if ne jmp wer7

wer7:
inc decepcount
jmp decepgame3

cork7:
inc score
inc decepcount
jmp decepgame3
ret
boxes7 endp

boxes8 proc near

mov ax, 03h
int 10h


mov bh, 21h
call bo1
mov bh, 03h
call bob1
lea dx, mag
call print

mov bh, 0e1h
call bo2
mov bh, 0eh
call bob2
lea dx, yel
call print

mov bh, 0f3h
call bo3
mov bh, 0fh
call bob3
lea dx, whi
call print


mov bh, 24h
call bo4
mov bh, 02h
call bob4
lea dx, gre
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check8:

call ask
cmp al,'q'
if e jmp cork8
cmp al,'x'
if e call gameover	
if ne jmp wer8

wer8:
inc decepcount
jmp decepgame3

cork8:
inc score
inc decepcount
jmp decepgame3
ret
boxes8 endp

boxes9 proc near


mov ax, 03h
int 10h


mov bh, 11h
call bo1
mov bh, 01h
call bob1
lea dx, blu
call print

mov bh, 21h
call bo2
mov bh, 02h
call bob2
lea dx, gre
call print

mov bh, 0f3h
call bo3
mov bh, 0fh
call bob3
lea dx, whi
call print


mov bh, 14h
call bo4
mov bh, 01h
call bob4
lea dx, gre
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check9:

call ask
cmp al,'s'
if e jmp cork9
cmp al,'x'
if e call gameover	
if ne jmp wer9

wer9:
inc decepcount
jmp decepgame3


cork9:
inc score
inc decepcount
jmp decepgame3
ret
boxes9 endp

boxes10 proc near

mov ax, 03h
int 10h

mov bh, 11h
call bo1
mov bh, 01h
call bob1
lea dx, blu
call print

mov bh, 0f1h
call bo2
mov bh, 0eh
call bob2
lea dx, mag
call print

mov bh, 0e3h
call bo3
mov bh, 0eh
call bob3
lea dx, yel
call print


mov bh, 24h
call bo4
mov bh, 02h
call bob4
lea dx, gre
call print
;-----------------------------------q left, w ryt, a down left, s down ryt

check10:

call ask
cmp al,'a'
if e jmp cork10
cmp al,'x'
if e call gameover	
if ne jmp wer10

wer10:
inc decepcount
jmp decepgame3

cork10:
inc score
inc decepcount
jmp decepgame3
boxes10 endp
;---------

mechanics proc near

	mov bh, 76h
	mov cx, 0000h
	mov dx, 184fh
	call scroll

	mov dx, 0000h
	call cursor
	
	lea dx, menuborder
	call print
	
	mov dh, 3
	mov dl, 28
	call cursor
	
	lea dx, wel
	call print			

	mov dh, 4
	mov dl, 8
	call cursor
	
	lea dx, wel1
	call print
	
	mov dh, 5
	mov dl, 18
	call cursor

	lea dx, wel2
	call print

	mov dh, 8
	mov dl, 9
	call cursor
	
	lea dx, mechbox1
	call print

	mov dh, 9
	mov dl, 9
	call cursor
	
	lea dx, mechbox2
	call print

	mov dh, 10
	mov dl, 9
	call cursor

	lea dx, mechbox2
	call print

	mov dh, 11
	mov dl, 9
	call cursor

	lea dx, mechbox2
	call print

	mov dh, 12
	mov dl, 9
	call cursor
	
	lea dx, mechbox3
	call print	

	mov dh, 10
	mov dl, 12
	call cursor

	lea dx, simpl
	call print	

	mov dh, 10
	mov dl, 40
	call cursor

	lea dx, codep
	call print
	
	mov dh, 16
	mov dl, 9
	call cursor
	
	lea dx, mechbox1
	call print

	mov dh, 17
	mov dl, 9
	call cursor
	
	lea dx, mechbox2
	call print

	mov dh, 18
	mov dl, 9
	call cursor

	lea dx, mechbox2
	call print

	mov dh, 19
	mov dl, 9
	call cursor

	lea dx, mechbox2
	call print

	mov dh, 20
	mov dl, 9
	call cursor
	
	lea dx, mechbox3
	call print	
	
	mov dh, 18
	mov dl, 12
	call cursor

	lea dx, ord
	call print	

	mov dh, 18
	mov dl, 41
	call cursor

	lea dx, cmajor
	call print
	
	mov dh, 13 
	mov dl, 65
	call cursor

	lea dx, back
	call print	

	mov dh, 15
	mov dl, 65
	call cursor

	lea dx, escape
	call print

	call mechchoice
ret
mechanics endp

mechchoice proc near
askmech:
	call ask
	cmp al, 's'
	if e call simplct
	cmp al, 'S'
	if e call simplct
	cmp al, 'c'
	if e call coldep
	cmp al, 'C'
	if e call coldep
	cmp al, 'm'
	if e call colmem
	cmp al, 'M'	
	if e call colmem
	cmp al, 'y'
	if e call colmaj
	cmp al, 'Y'
	if e call colmaj
	cmp al, 08h
	if e call menuing
	cmp al, 'q'
	if e call quitting
	cmp al, 'Q'
	if e call quitting
	if ne jmp askmech
	ret
mechchoice endp

quitting proc near

	mov bh, 03h
	mov cx, 0000h
	mov dx, 184fh
	call scroll

	mov dh, 12
	mov dl, 00
	call cursor

	lea dx, quits
	call print
askquit:
	call ask
	cmp al, 'a'
	if e jmp exitgame
	cmp al, 'A'
	if e jmp exitgame
	cmp al, 'd'
	if e call mechanics
	cmp al, 'D'
	if e call mechanics
	if ne jmp askquit
exitgame:
	mov ax, 03h
	int 10h	

	int 20h
ret
quitting endp

colmaj proc near
	mov bh, 76h
	mov cx, 0000h
	mov dx, 184fh
	call scroll

	mov dx, 0000h
	call cursor
	
	lea dx, tap
	call print

	mov dh, 22
	mov dl, 65
	call cursor
	
	lea dx, back
	call print
colmajback:
	call ask
	cmp al, 08h
	if e call mechanics
	if ne jmp colmajback

ret
colmaj endp

colmem proc near
	mov bh, 76h
	mov cx, 0000h
	mov dx, 184fh
	call scroll

	mov dx, 0000h
	call cursor
	
	lea dx, flip
	call print

	mov dh, 22
	mov dl, 65
	call cursor
	
	lea dx, back
	call print
colmemback:
	call ask
	cmp al, 08h
	if e call mechanics
	if ne jmp colmemback
ret
colmem endp

coldep proc near
	mov bh, 76h
	mov cx, 0000h
	mov dx, 184fh
	call scroll

	mov dx, 0000h
	call cursor
	
	lea dx, dep
	call print

	mov dh, 22
	mov dl, 65
	call cursor
	
	lea dx, back
	call print
coldepback:
	call ask
	cmp al, 08h
	if e call mechanics
	if ne jmp coldepback
ret
coldep endp	

simplct proc near
	mov bh, 76h
	mov cx, 0000h
	mov dx, 184fh
	call scroll

	mov dx, 0000h
	call cursor
	
	lea dx, simp
	call print

	mov dh, 22
	mov dl, 65
	call cursor
	
	lea dx, back
	call print
simplback:
	call ask
	cmp al, 08h
	if e call mechanics
	if ne jmp simplback
ret	
simplct endp

leftch proc near
	cmp chcursdl, 8
	if l jmp stleft
	if g jmp procl
stleft:
	mov chcursdl, 8
	jmp askarr
procl:
	mov al, chcursdl
	sub al, 25
	mov chcursdl, al

	mov dh, 11
	mov dl, chcursdl
	call cursor
	jmp askarr
ret
leftch endp
	
rightch proc near
	cmp chcursdl, 58
	if l jmp procr
	if g jmp stright
stright:
	mov chcursdl, 58
	jmp askarr
procr:	
	mov al, chcursdl
	add al, 25
	mov chcursdl, al

	mov dh, 11
	mov dl, chcursdl
	call cursor	
	jmp askarr

ret
rightch endp

readchar proc near
	mov ah, 08h
	int 10h
ret
readchar endp

menuing proc near
diri:
	mov eqgamecount, 0
	mov taptilecount, 0
	mov decepcount, 0
	mov fgamecount, 0

	mov bh, 72h
	mov cx, 0000h
	mov dx, 184fh
	call scroll

	mov dx, 0000h
	call cursor
	
	lea dx, menuborder
	call print
	
;-----printing mechanics box	
	mov bh, 17h
	mov cx, 0606h
	mov dx, 101ah
	call scroll	

	mov dh, 7
	mov dl, 8
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 8
	mov dl, 8
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 9
	mov dl, 8
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 10
	mov dl, 8
	call cursor

	lea dx, bordsmile1
	call print
	
	mov dh, 11
	mov dl, 8
	call cursor
	
	lea dx, bordsmile2
	call print

	mov dh, 11
	mov dl, 12
	call cursor
	
	mov bh, 1eh
	mov ch, 11
	mov cl, 12
	mov dh, 11
	mov dl, 20
	call scroll	

	lea dx, mech
	call print
	
	mov dh, 11
	mov dl, 21
	call cursor
	
	lea dx, bordsmile2
	call print

	mov dh, 12
	mov dl, 8
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 13
	mov dl, 8
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 14
	mov dl, 8
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 15
	mov dl, 8
	call cursor

	lea dx, bordsmile1
	call print
;------------------------------
;------print play box
	mov bh, 1eh
	mov ch, 6
	mov cl, 31
	mov dh, 16
	mov dl, 51
	call scroll	
	
	mov dh, 7
	mov dl, 33
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 8
	mov dl, 33
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 9
	mov dl, 33
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 10
	mov dl, 33
	call cursor

	lea dx, bordsmile1
	call print
	
	mov dh, 11
	mov dl, 33
	call cursor
	
	lea dx, bordsmile2
	call print

	mov dh, 11
	mov dl, 40
	call cursor
	
	mov bh, 1ch
	mov ch, 11
	mov cl, 40
	mov dh, 11
	mov dl, 43
	call scroll	

	lea dx, play
	call print
	
	mov dh, 11
	mov dl, 46
	call cursor
	
	lea dx, bordsmile2
	call print

	mov dh, 12
	mov dl, 33
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 13
	mov dl, 33
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 14
	mov dl, 33
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 15
	mov dl, 33
	call cursor

	lea dx, bordsmile1
	call print		
;------------------------
;---printing quit box
	mov bh, 15h
	mov ch, 6
	mov cl, 56
	mov dh, 16
	mov dl, 74
	call scroll	
	
	mov dh, 7
	mov dl, 57
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 8
	mov dl, 57
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 9
	mov dl, 57
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 10
	mov dl, 57
	call cursor

	lea dx, bordsmile1
	call print
	
	mov dh, 11
	mov dl, 57
	call cursor
	
	lea dx, bordsmile2
	call print

	mov dh, 11
	mov dl, 64
	call cursor
	
	mov bh, 1fh
	mov ch, 11
	mov cl, 64
	mov dh, 11
	mov dl, 68
	call scroll	

	lea dx, quit
	call print
	
	mov dh, 11
	mov dl, 70
	call cursor
	
	lea dx, bordsmile2
	call print

	mov dh, 12
	mov dl, 57
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 13
	mov dl, 57
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 14
	mov dl, 57
	call cursor

	lea dx, bordsmile1
	call print

	mov dh, 15
	mov dl, 57
	call cursor

	lea dx, bordsmile1
	call print		
;----------------------------
	call menuchoose
ret
menuing endp

ask proc near
	mov ah, 00h
	int 16h
ret
ask endp

scroll proc near
	mov ax, 0600h
	int 10h
ret
scroll endp

covering proc near
	mov ax, 03h
	int 10h
	
	mov dx, 0000h
	call cursor

	lea dx, cover
	call print
	
ret
covering endp

print proc near
	mov ah, 09h
	int 21h
ret
print endp

cursor proc near
	mov ah, 02h
	mov bh, 00h
	int 10h
ret
cursor endp

delay proc near
	mov base2, 800
loop1:
	mov base1, 0ffffh
loop2:
	nop
	dec base1 
	jnz loop2

	dec base2
	jnz loop1
ret
delay endp


delay2 proc near
	mov base2, 10000
loop11:
	mov base1, 0ffffh
loop21:
	nop
	dec base1 
	jnz loop2

	dec base2
	jnz loop1
ret
delay endp

random1 proc near
	mov ax, 0000h
	out 43h, al
	in al, 40h

	mov bl, 15
	div bl

	mov randomeq, ah

ret
random1 endp

random2 proc near
	mov ax, 0000h
	out 43h, al
	in al, 40h

	mov bl, 10
	div bl
	
	mov randoms, ah

ret
random2 endp

gamebox proc near
	mov dh, 06
	mov dl, 20
	call cursor
	
	lea dx, gamebox1
	call print
	
	mov dh, 07
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 08
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 09
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 10
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 11
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 12
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 13
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 14
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 15
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 16
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 17
	mov dl, 20
	call cursor
	
	lea dx, gamebox2
	call print
	
	mov dh, 18
	mov dl, 20
	call cursor
	
	lea dx, gamebox1
	call print
	
ret
gamebox endp

gameover proc near
	mov eqgamecount, 0
	mov taptilecount, 0
	mov decepcount, 0
	mov fgamecount, 0
	

	mov cx, 0000h
	mov dx, 184fh
	mov bh, 00h
	call scroll
	
        mov dx, 0000h
	call cursor
	
	mov cx, 0000h
	mov dx, 184fh
	mov bh, 04h
	call scroll
	
	lea dx, gamo
	call print
	
	call delay
	
	inc twopl

	call area2
	call scoring

ret
gameover endp
;--------------------------------------------
scoring proc near
		
	cmp twopl, 1
	if e jmp p1
	if ne jmp p2
p1:
	cmp score, 10
	if l jmp tless1
	cmp score, 20
	if l jmp twless1
	cmp score, 30
	if l jmp thless1
	cmp score, 40
	if l jmp frless1
	cmp score, 50
	if l jmp ftless1

tless1:
	mov res1, 0
	
	mov al, res1
	add al, score
	mov res1, al
	
	mov al, score
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, score
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h
	
	jmp anina2
	
twless1:
	mov res1, 0
	mov al, res1
	add al, score
	mov res1, al

	mov al, score
	sub al, 10
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '1'
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, score
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	jmp anina2
thless1:
	
	mov res1, 0
	mov al, res1
	add al, score
	mov res1, al

	mov al, score
	sub al, 20
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '2'
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, score
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	jmp anina2
frless1:
	
	mov res1, 0
	mov al, res1
	add al, score
	mov res1, al

	mov al, score
	sub al, 30
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '3'
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, score
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	jmp anina2
ftless1:
	
	mov res1, 0
	mov al, res1
	add al, score
	mov res1, al

	mov al, score
	sub al, 40
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '4'
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, score
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	jmp anina2
p2:
	cmp score, 10
	if l jmp tless2
	cmp score, 20
	if l jmp twless2
	cmp score, 30
	if l jmp thless2
	cmp score, 40
	if l jmp frless2
	cmp score, 50
	if l jmp ftless2
	
tless2:
	cmp res1, 10
	if l jmp tl2
	cmp res1, 20
	if l jmp tl3
	cmp res1, 30
	if l jmp tl4
	cmp res1, 40
	if l jmp tl5
	cmp res1, 50
	if l jmp tl6
tl2:
	mov al, res1
	add al, 48
	mov res1, al
	
	mov dh, 11
	mov dl, 19
	call cursor

	mov cx, 0001h
	mov bh, 00
	mov bl, 1eh
	mov al, res1
	mov ah, 09h
	int 10h
	
	mov al, score
	add al, 48
	mov score, al
	
	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin
tl3:
	mov al, res1
	sub al, 10
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '1'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin
tl4:
	mov al, res1
	sub al, 20
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '2'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin
	
tl5:
	mov al, res1
	sub al, 30
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '3'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin
tl6:
	mov al, res1
	sub al, 40
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '4'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin
twless2:
	cmp res1, 10
	if l jmp twl2
	cmp res1, 20
	if l jmp twl3
	cmp res1, 30
	if l jmp twl4
	cmp res1, 40
	if l jmp twl5
	cmp res1, 50
	if l jmp twl6
twl2:
	mov al, res1
	add al, 48
	mov res1, al
	
	mov dh, 11
	mov dl, 19
	call cursor

	mov cx, 0001h
	mov bh, 00
	mov bl, 1eh
	mov al, res1
	mov ah, 09h
	int 10h
	
	mov al, score
	sub al, 10
	add al, 48
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '1'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
twl3:
	mov al, res1
	sub al, 10
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '1'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 10
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '1'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
twl4:
	mov al, res1
	sub al, 20
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '2'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	
	mov al, score
	add al, 48
	sub al, 10
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '1'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
	
twl5:
	mov al, res1
	sub al, 30
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '3'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 10
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '1'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
twl6:
	mov al, res1
	sub al, 40
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '4'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 10
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '1'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin
thless2:
	cmp res1, 10
	if l jmp thl2
	cmp res1, 20
	if l jmp thl3
	cmp res1, 30
	if l jmp thl4
	cmp res1, 40
	if l jmp thl5
	cmp res1, 50
	if l jmp thl6
thl2:
	mov al, res1
	add al, 48
	mov res1, al
	
	mov dh, 11
	mov dl, 19
	call cursor

	mov cx, 0001h
	mov bh, 00
	mov bl, 1eh
	mov al, res1
	mov ah, 09h
	int 10h
	
	mov al, score
	add al, 48
	sub al, 10
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '2'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
thl3:
	mov al, res1
	sub al, 10
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '1'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 20
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '2'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
thl4:
	mov al, res1
	sub al, 20
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '2'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	
	mov al, score
	add al, 48
	sub al, 20
	mov score, al

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '2'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
	
thl5:
	mov al, res1
	sub al, 30
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '3'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 20
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '2'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
thl6:
	mov al, res1
	sub al, 40
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '4'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 20
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '2'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin			

frless2:
	cmp res1, 10
	if l jmp frl2
	cmp res1, 20
	if l jmp frl3
	cmp res1, 30
	if l jmp frl4
	cmp res1, 40
	if l jmp frl5
	cmp res1, 50
	if l jmp frl6
frl2:
	mov al, res1
	add al, 48
	mov res1, al
	
	mov dh, 11
	mov dl, 19
	call cursor

	mov cx, 0001h
	mov bh, 00
	mov bl, 1eh
	mov al, res1
	mov ah, 09h
	int 10h
	
	mov al, score
	add al, 48
	sub al, 30
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '3'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
frl3:
	mov al, res1
	sub al, 10
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '1'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 30
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '3'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
frl4:
	mov al, res1
	sub al, 20
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '2'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	
	mov al, score
	add al, 48
	sub al, 30
	mov score, al

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '3'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
	
frl5:
	mov al, res1
	sub al, 30
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '3'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 30
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '3'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
frl6:
	mov al, res1
	sub al, 40
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '4'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 30
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '3'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin
			
ftless2:
	cmp res1, 10
	if l jmp ftl2
	cmp res1, 20
	if l jmp ftl3
	cmp res1, 30
	if l jmp ftl4
	cmp res1, 40
	if l jmp ftl5
	cmp res1, 50
	if l jmp ftl6
ftl2:
	mov al, res1
	add al, 48
	mov res1, al
	
	mov dh, 11
	mov dl, 19
	call cursor

	mov cx, 0001h
	mov bh, 00
	mov bl, 1eh
	mov al, res1
	mov ah, 09h
	int 10h
	
	mov al, score
	mov al, 48
	sub al, 40
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '4'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
ftl3:
	mov al, res1
	sub al, 10
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '1'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 40
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '4'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
ftl4:
	mov al, res1
	sub al, 20
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '2'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	
	mov al, score
	add al, 48
	sub al, 40
	mov score, al

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '4'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
	
ftl5:
	mov al, res1
	sub al, 30
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '3'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 40
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '4'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h


	call compwin
ftl6:
	mov al, res1
	sub al, 40
	add al, 48
	mov res1, al

	mov dh, 11
	mov dl, 19
	call cursor

	mov ah, 09h	
	mov al, '4'
	mov bl, 1eh
	mov bh, 00h
	mov cx, 0001h
	int 10h

	mov dh, 11
	mov dl, 20
	call cursor

	mov ah, 09h	
	mov al, res1
	mov bl, 1eh
	mov bh, 00h
	mov cx,0001h
	int 10h
	

	mov al, score
	add al, 48
	sub al, 40
	mov score, al

	mov dh, 11
	mov dl, 59
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, '4'
	mov ah, 09h
	int 10h

	mov dh, 11
	mov dl, 60
	call cursor

	mov cx, 0001h
	mov bh, 00h
	mov bl, 1eh
	mov al, score
	mov ah, 09h
	int 10h

	call compwin
			
ret
scoring endp


compwin proc near

	mov al, res1
	cmp al, score
	if g call p1win
	if l call p2win
	if e call draws	
	
ret
compwin endp

p1win proc near
	call delay
	call delay

	mov ax, 03h
	int 10h
	
	mov cx, 0000h
	mov dx, 184fh
	mov bh, 05h
	call scroll
		
	mov dh, 12
	mov dl, 25
	call cursor

	lea dx, statwin
	call print
	
	call delay
	call delay2
	mov ax, 03h
	int 10h	
	jmp stop

ret
p1win endp 

p2win proc near
	call delay
	call delay

	mov ax, 03h
	int 10h

	mov cx, 0000h
	mov dx, 184fh
	mov bh, 05h
	call scroll
		
	mov dh, 12
	mov dl, 25
	call cursor

	lea dx, statlose
	call print
	
	call delay2
	call delay	
	mov ax, 03h
	int 10h
	jmp stop
ret
p2win endp

draws proc near
	call delay
	call delay
	
	mov ax, 03h
	int 10h

	mov cx, 0000h
	mov dx, 184fh
	mov bh, 05h
	call scroll
		
	mov dh, 12
	mov dl, 15
	call cursor

	lea dx, statdraw
	call print
		
	call delay2	
	call delay
	mov ax, 03h
	int 10h
	jmp stop
ret
draws endp	
;----------------------------------display area2
area2 proc near

mov ax, 03h
int 10h

mov ch, 0
mov cl, 0
mov dh, 22
mov dl, 38
mov bh, 1eh
call scroll

mov ch, 0
mov cl, 41
mov dh, 22
mov dl, 79
mov bh, 5bh
call scroll

mov dh, 0
mov dl, 0
call cursor

lea dx, ar1
call print


mov dh, 1
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 2
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 3
mov dl, 0
call cursor
lea dx, ar3
call print

mov dh, 4
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 5
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 6
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 7
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 8
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 9
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 10
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 11
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 12
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 13
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 14
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 15
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 16
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 17
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 18
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 19
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 20
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 21
mov dl, 0
call cursor
lea dx, ar2
call print

mov dh, 22
mov dl, 0
call cursor
lea dx, ar4
call print

;-player2


mov dh, 0
mov dl, 41
call cursor

lea dx, ar1
call print


mov dh, 1
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 2
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 3
mov dl, 41
call cursor
lea dx, ar3
call print

mov dh, 4
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 5
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 6
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 7
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 8
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 9
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 10
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 11
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 12
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 13
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 14
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 15
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 16
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 17
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 18
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 19
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 20
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 21
mov dl, 41
call cursor
lea dx, ar2
call print

mov dh, 22
mov dl, 41
call cursor
lea dx, ar4
call print

mov dh,2
mov dl,3
call cursor


lea dx, plar1
call print

mov dh,2
mov dl,45
call cursor

lea dx, plar2
call print

mov dh,11
mov dl,3
call cursor

lea dx, statres
call print

;-

mov dh,11
mov dl,45
call cursor

lea dx, statres
call print

mov ch, 02
mov cl, 12
mov dh,2
mov dl, 37
mov bh,1eh
call scroll

mov dh,2
mov dl, 12
call cursor

mov ch, 02
mov cl, 12
mov dh, 2
mov dl, 37
mov bh, 1eh
call scroll

mov dh, 2
mov dl, 12
call cursor

lea dx, player1
call print

mov ch, 02
mov cl, 54
mov dh, 02
mov dl, 77
mov bh, 5bh
call scroll

mov dh, 2
mov dl, 54
call cursor


mov ch, 02
mov cl, 54
mov dh, 02
mov dl, 77
mov bh, 5bh
call scroll

mov dh, 2
mov dl,54
call cursor

;------------------------------------------unang bug
lea dx, player2
call print 

ret
area2 endp